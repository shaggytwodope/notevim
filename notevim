#!/usr/bin/python2
# vim: sw=4:ts=4:et

from __future__ import print_function
import subprocess
import glob
import sys
import os


NOTEVIM           = sys.argv[0]
NOTES_DIR         = os.path.expandvars("$HOME/SparkleShare/notes")
SESSION_NAME      = "NOTEVIM"
MODE              = 'neovim'
TERMINAL_EMULATOR = 'sakura'

def cmd_usage():
    usage_text = (
        "Dave's note vim loader\n"
        "Usage:\n"
        "   notevim <filename>  - open file in note directory\n"
        "   notevim --openbox   - Openbox pipe menu with the files in the note dir\n"
        "   notevim --dmenu     - Show dmenu as a selector for the files\n"
        "   notevim --list      - Normal list of the files in the note dir\n"
        "   notevim             - Without any parameters, shows this help text\n"
        "The note directory is $NOTES_DIR\n")
    print(usage_text)
    sys.exit(0)

def list_files():
    yield '*'
    for name in glob.glob(os.path.join(NOTES_DIR, '*')):
        yield os.path.basename(name)

def cmd_list():
    for name in list_files():
        print(name)

def cmd_list_openbox():
    prelude = (
        '<openbox_pipe_menu>\n'
        '<item label="(New/None)">\n'
        '<action name="Execute">\n'
        '    <execute>\n'
        '        %s *\n'
        '    </execute>\n'
        '</action>\n'
        '</item>\n'
    )
    print(prelude % NOTEVIM)

    for name in list_files:
        entry = (
            '<item label="_%s">\n'
            '<action name="Execute">\n'
            '    <execute>\n'
            '        %s %s\n'
            '    </execute>\n'
            '</action>\n'
            '</item>\n'
        )
        print (entry % (name, NOTEVIM, name))

    print('</openbox_pipe_menu>\n')

def cmd_dmenu():
    names_list = "\n".join(sorted(list_files())) + "\n"
    dm = subprocess.Popen(
        ['dmenu', '-i', '-p', 'Open Note:'],
        stdin =subprocess.PIPE,
        stdout=subprocess.PIPE
    )
    stdout, stderr = dm.communicate(names_list)

    stdout = stdout.decode('utf-8')
    return stdout.strip()


def cmd_open(filename):
    if filename == '':
        print("No filename given, probably menu aborted.")
    elif MODE == 'neovim':
        cmd_open_neovim(filename)
    else:
        cmd_open_gvim(filename)

    fetch_window()


def fetch_window():
    windows = subprocess.check_output(['wmctrl', '-l']).decode('utf-8').split("\n")

    session_windows = [win.split(" ")[0] for win in windows if SESSION_NAME in win]

    if len(session_windows):
        subprocess.check_call(['wmctrl', '-i', '-R', session_windows[0]])


def cmd_open_neovim(filename):
    # import here so we don't crash in gvim mode if neovim
    # module is not present on the system
    import neovim

    socket    = os.path.expandvars('/tmp/neovim-notevim-$USER')
    full_path = os.path.join(NOTES_DIR, filename)

    if os.path.exists(socket):
        try:
            client = neovim.attach('socket', path=socket)
            client.command(':tabnew')

        except Exception as e:
            # Socket not writable, prolly leftover socket file..
            os.unlink(socket)
            return cmd_open_neovim(filename)

        if filename == '*':
            # special case: new file
            return

        client.command(':edit %s' % full_path)

        # workaround for airline update problem - TODO: really needed?
        client.command(':edit!')

    else:
        os.chdir(NOTES_DIR)

        os.environ.update({
            'NVIM_TUI_ENABLE_TRUE_COLOR': '1',
            'NVIM_LISTEN_ADDRESS':        socket
        })

        cmd = [TERMINAL_EMULATOR, '-t', SESSION_NAME, '-e', 'nvim']

        if filename != '*':
            cmd.append(filename)

        subprocess.call(cmd)


def cmd_open_gvim(filename):
    raise Exception('Sorry, not implemented yet')

    # Old shell impl:
    #if gvim --serverlist |grep -q $SESSION_NAME; then
    #    # Scratchpad session exists
    #    # open scratchpad if it's not open already
    #    if [ "$1" = "*" ]; then
    #        gvim --servername $SESSION_NAME  --remote-send '<esc>:tabnew<cr>'
    #    else
    #        gvim --servername $SESSION_NAME --remote-tab "$FILE"
    #    fi
    #    wmctrl -l \
    #        | awk '/'$SESSION_NAME'/ {print $1}' \
    #        | xargs -I% wmctrl -i -R %
    #else

    #    cd "$NOTES_DIR"
    #    if [ "$1" = "*" ]; then
    #        gvim --servername $SESSION_NAME
    #    else
    #        gvim --servername $SESSION_NAME "$1"
    #    fi
    #fi

if __name__ == '__main__':
    if len(sys.argv) < 2:
        cmd_usage()

    cmd = sys.argv[1]

    if cmd == '--list':
        cmd_list()

    elif cmd == '--openbox':
        cmd_list_openbox()

    elif cmd == '--dmenu':
        filename = cmd_dmenu()
        cmd_open(filename)

    else:
        cmd_open(cmd)

